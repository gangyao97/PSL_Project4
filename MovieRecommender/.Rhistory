shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp('~/Desktop/project4/MovieRecommender')
runApp('~/Desktop/project4/MovieRecommender')
runApp('~/Desktop/project4/MovieRecommender')
shiny::runApp()
runApp('~/Desktop/project4/MovieRecommender')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
# popularity-based recommendation
ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(),
ave_ratings = round(mean(Rating), dig=3)) %>%
inner_join(movies, by = 'MovieID') %>%
inner_join(genre_df, by = 'MovieID') %>%
filter(ratings_per_movie > 1000) %>%
filter(Action == 1) %>%
top_n(10, ratings_per_movie) %>%
mutate(Image = paste0('<img src="',
small_image_url,
MovieID,
'.jpg?raw=true"></img>')) %>%
select('Image', 'Title', 'ratings_per_movie') %>%
arrange(desc(ratings_per_movie)) %>%
datatable(class = "nowrap hover row-border",
escape = FALSE,
options = list(dom = 't',
scrollX = TRUE, autoWidth = TRUE))
runApp()
plot(cars)
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
movies = readLines(paste0(myurl, 'movies.dat?raw=true'))
movies = strsplit(movies, split = "::", fixed = TRUE, useBytes = TRUE)
movies = matrix(unlist(movies), ncol = 3, byrow = TRUE)
movies = data.frame(movies, stringsAsFactors = FALSE)
colnames(movies) = c('MovieID', 'Title', 'Genres')
movies$MovieID = as.integer(movies$MovieID)
# convert accented characters
movies$Title[73]
movies$Title = iconv(movies$Title, "latin1", "UTF-8")
movies$Title[73]
# extract year
movies$Year = as.numeric(unlist(
lapply(movies$Title, function(x) substr(x, nchar(x)-4, nchar(x)-1))))
# User data
users = read.csv(paste0(myurl, 'users.dat?raw=true'),
sep = ':', header = FALSE)
users = users[, -c(2,4,6,8)] # skip columns
colnames(users) = c('UserID', 'Gender', 'Age', 'Occupation', 'Zip-code')
# popularity-based recommendation
ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(),
ave_ratings = round(mean(Rating), dig=3)) %>%
inner_join(movies, by = 'MovieID') %>%
inner_join(genre_df, by = 'MovieID') %>%
filter(ratings_per_movie > 1000) %>%
filter(Action == 1) %>%
top_n(10, ratings_per_movie) %>%
mutate(Image = paste0('<img src="',
small_image_url,
MovieID,
'.jpg?raw=true"></img>')) %>%
select('Image', 'Title', 'ratings_per_movie') %>%
arrange(desc(ratings_per_movie)) %>%
datatable(class = "nowrap hover row-border",
escape = FALSE,
options = list(dom = 't',
scrollX = TRUE, autoWidth = TRUE))
# ratings-based recommendation
ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(),
ave_ratings = round(mean(Rating), dig=3)) %>%
inner_join(movies, by = 'MovieID') %>%
inner_join(genre_df, by = 'MovieID') %>%
filter(ratings_per_movie > 1000) %>%
filter(Action == 1) %>%
top_n(10, ave_ratings) %>%
mutate(Image = paste0('<img src="',
small_image_url,
MovieID,
'.jpg?raw=true"></img>')) %>%
select('Image', 'Title', 'ave_ratings') %>%
arrange(desc(ave_ratings)) %>%
datatable(class = "nowrap hover row-border",
escape = FALSE,
options = list(dom = 't',
scrollX = TRUE, autoWidth = TRUE))
# ratings-based recommendation
library(dplyr)
ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(),
ave_ratings = round(mean(Rating), dig=3)) %>%
inner_join(movies, by = 'MovieID') %>%
inner_join(genre_df, by = 'MovieID') %>%
filter(ratings_per_movie > 1000) %>%
filter(Action == 1) %>%
top_n(10, ave_ratings) %>%
mutate(Image = paste0('<img src="',
small_image_url,
MovieID,
'.jpg?raw=true"></img>')) %>%
select('Image', 'Title', 'ave_ratings') %>%
arrange(desc(ave_ratings)) %>%
datatable(class = "nowrap hover row-border",
escape = FALSE,
options = list(dom = 't',
scrollX = TRUE, autoWidth = TRUE))
View(movies)
View(ratings)
# popularity-based recommendation
library(tidyverse)
ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(),
ave_ratings = round(mean(Rating), dig=3)) %>%
inner_join(movies, by = 'MovieID') %>%
inner_join(genre_df, by = 'MovieID') %>%
filter(ratings_per_movie > 1000) %>%
filter(Action == 1) %>%
top_n(10, ratings_per_movie) %>%
mutate(Image = paste0('<img src="',
small_image_url,
MovieID,
'.jpg?raw=true"></img>')) %>%
select('Image', 'Title', 'ratings_per_movie') %>%
arrange(desc(ratings_per_movie)) %>%
datatable(class = "nowrap hover row-border",
escape = FALSE,
options = list(dom = 't',
scrollX = TRUE, autoWidth = TRUE))
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
